{"version":3,"file":"static/js/451.74ad2088.chunk.js","mappings":"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","sources":["../node_modules/@randlabs/communication-bridge/index.js","../node_modules/@randlabs/communication-bridge/lib/messenger.js","../node_modules/@randlabs/myalgo-connect/index.js","../node_modules/@randlabs/myalgo-connect/lib/main.js","../node_modules/@randlabs/myalgo-connect/lib/messaging/Messaging.js","../node_modules/@randlabs/myalgo-connect/lib/popup/popup.js","../node_modules/@randlabs/myalgo-connect/lib/utils/errors.js","../node_modules/@randlabs/myalgo-connect/lib/utils/utils.js","../node_modules/@babel/runtime/helpers/construct.js","../node_modules/@babel/runtime/helpers/isNativeFunction.js","../node_modules/@babel/runtime/helpers/wrapNativeSuper.js"],"sourcesContent":["module.exports = require(\"./lib/messenger\");\n","class Messenger {\n\n\t/**\n\t * @callback onMessage\n\t * @param {error} err\n\t * @param {Object} result\n\t */\n\n\t/**\n\t * @description Callback function to send response to the window source of the message\n\t * @callback sendResponse\n\t * @param {Object} response Message response\n\t * @returns {void}\n\t */\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessageCallback\n     * @param {Object} json\n\t * @param {Window} source\n     * @param {sendResponse} cb\n\t * @param {Messenger} bridge\n\t * @returns {void}\n     */\n\n\t/**\n\t * @description Send message options\n\t * @typedef {Object} sendMessageOptions\n\t * @property {boolean} waitForReply Wait for a reply from the recipient\n\t * @property {string} origin Override Window.origin\n\t * @property {number} timeout Timeout to wait for reply message, default 4000 msec\n\t */\n\n\t/**\n     * @param {string} channelName  Channel Name\n     * @param {onMessageCallback} [onMessageCallback] Callback function\n     */\n\n\tconstructor(channelName, onMessageCallback) {\n\t\tthis.channelName = channelName;\n\t\tthis.onMessage = onMessageCallback;\n\n\t\tthis._installListener();\n\n\t\t/**\n\t\t * @access private\n\t\t * @typedef {Object.<string, onMessage>} RequestObject Request objects\n\t\t * @type {RequestObject} _requests Mapping of request ids to callbacks\n\t\t */\n\t\tthis._requests = new Map();\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Next request id\n\t\t */\n\t\tthis._nextId = 0;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Time to wait for the message response\n\t\t */\n\t\tthis._defaultTimeout = 4000;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\t_installListener() {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access private\n\t\t * @param {Window} this\n\t\t * @param {MessageEvent} event\n\t\t */\n\n\t\tthis._listener = function (event) {\n\t\t\t// Ignore invalid messages or those after the client has closed\n\t\t\tif (!event.data || typeof event.data !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet json;\n\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(event.data);\n\t\t\t\tif (!json.channel || json.channel !== that.channelName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (typeof json.message !== 'object') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t // Ignore malformed messages or not targetting us\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add request callback\n\t\t\tif (typeof json.replyId !== 'undefined') {\n\n\t\t\t\tif (typeof json.replyId !== 'number' || (json.replyId % 1) !== 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If we have a message waiting for a reply, process it, else ignore\n\t\t\t\tconst req = that._requests.get(json.replyId);\n\t\t\t\tif (req) {\n\t\t\t\t\t// Ignore if the message comes from somewhere else\n\t\t\t\t\tif (event.origin !== req.targetOrigin) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(req.timeout);\n\n\t\t\t\t\tthat._requests.delete(json.replyId);\n\n\t\t\t\t\treq.resolve(json.message);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (typeof json.id !== 'number' || (json.id % 1) !== 0 || !that.onMessage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We received a message\n\t\t\t\tconst channel = that.channelName;\n\t\t\t\tconst replyId = json.id;\n\t\t\t\tconst origin = event.origin;\n\n\t\t\t\tconst replyMessage = function (message) {\n\t\t\t\t\tconst request = {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\treplyId,\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t};\n\n\t\t\t\t\tevent.source.postMessage(\n\t\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\t\torigin\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tthat.onMessage(json.message, event.origin, event.source, replyMessage, that);\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener(\"message\", this._listener);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Send a message to another window\n\t * @param {Window} targetWindow Target Window\n\t * @param {Object} message Object Message\n\t * @param {string} origin Target origin\n\t * @param {sendMessageOptions} [options] Object Message\n\t * @returns {Promise<any>} Returns\n\t */\n\tsendMessage(targetWindow, message, origin, options) {\n\t\tlet targetOrigin;\n\t\ttry {\n\t\t\ttargetOrigin = new URL(origin).origin;\n\t\t}\n\t\tcatch (e) {\n\t\t\tthrow new Error('Invalid origin URL');\n\t\t}\n\n\t\t// Prepare message\n\t\tconst request = {\n\t\t\tchannel: this.channelName,\n\t\t\tid: this.getNextId(),\n\t\t\tmessage: message,\n\t\t};\n\n\t\tif (options && options.waitForReply) {\n\t\t\tconst that = this;\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t// Set a timeout if a response is not received\n\t\t\t\tconst timeout = setTimeout(function() {\n\t\t\t\t\tconst req = that._requests.get(request.id);\n\t\t\t\t\tif (req) {\n\t\t\t\t\t\tthat._requests.delete(request.id);\n\n\t\t\t\t\t\treject(new Error('Timeout expired for the message response'));\n\t\t\t\t\t}\n\t\t\t\t}, options && options.timeout ? options.timeout : that._defaultTimeout);\n\n\t\t\t\tthat._requests.set(request.id, {\n\t\t\t\t\ttimeout,\n\t\t\t\t\tresolve,\n\t\t\t\t\ttargetOrigin,\n\t\t\t\t});\n\n\t\t\t\ttargetWindow.postMessage(\n\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\ttargetOrigin\n\t\t\t\t);\n\t\t\t});\n\n\t\t}\n\t\ttargetWindow.postMessage(\n\t\t\tJSON.stringify(request),\n\t\t\ttargetOrigin\n\t\t);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close client connection\n\t */\n\n\tclose() {\n\t\twindow.removeEventListener('message', this._listener);\n\t\tthis._listener = null;\n\t\tdelete this._requests;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\tgetNextId() {\n\t\tthis._nextId += 1;\n\t\treturn this._nextId;\n\t}\n}\n\nmodule.exports = Messenger;\n","module.exports = require(\"./lib/main\");\n","const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst { Errors, SignTxnsError } = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n\n/**\n * @type {Messaging | null}\n */\nlet bridge = null;\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @description Base64 encoding of the canonical msgpack encoding of a SignedTxn\n * @typedef SignedTxnStr\n * @type {Base64}\n */\n\n/**\n * @description Application call transaction object\n * @typedef MultisigMetadata\n * @type {object}\n * @property {number} version Multisig version\n * @property {number} threshold Multisig threshold value\n * @property {Address[]} addrs Multisig cosigners\n */\n\n/**\n * @description ARC-0001 Transaction Object\n * @typedef WalletTransactions\n * @type {object}\n * @property {txs}\n * @property {Base64} txn Base64 encoding of the canonical msgpack encoding of a Transaction.\n * @property {Address} [authAddr] Authorized address used to sign the transaction when the account is rekeyed\n * @property {MultisigMetadata} [msig] Multisig metadata used to sign the transaction\n * @property {Address[]} [signers] Optional list of addresses that must sign the transactions\n * @property {SignedTxnStr} [stxn] Base64 encoding of the canonical msgpack encoding\n * of a SignedTxn corresponding to txn, when signers=[]\n * @property {string} [message] Optional message explaining the reason of the transaction\n * @property {string} [groupMessage] Message explaining the reason of this group of transaction.\n * Field only allowed in the first transaction of a group\n */\n\n/**\n * @description ARC-0001 Transaction Options Object\n * @typedef SignTxnsOpts\n * @type {object}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\tif (!bridge) {\n\t\t\tbridge = new Messaging();\n\t\t}\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current tealsign opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentTealSignPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signbytes opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\t this.currentSignBytesPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Replace default bridge options\n\t\t * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: this.timeout };\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Disable ledger nano\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.disableLedgerNano = (options && options.disableLedgerNano) ? options.disableLedgerNano : false;\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false, openManager: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tif (this.currentConnectPopup.closed) {\n\t\t\t\tthis.currentConnectPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentConnectPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup,\n\t\t\t\t{ method: \"unlock\", params: Object.assign(settings, { disableLedgerNano: this.disableLedgerNano }) },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction, signOptions) {\n\t\tlet txn;\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"transaction\",\n\t\t\t\t\tparams: { txn, settings: { disableLedgerNano: this.disableLedgerNano }, options: signOptions },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {WalletTransaction[]} txnsToSign Transactions to sign.\n\t * @param {SignTxnsOpts} [opts] Sign transactions options object.\n\t * @returns {(SignedTxnStr|null)[]} Returns an array of base64 encoding of the SignedTxn,\n\t * or null where the transaction was not to be signed.\n\t */\n\tasync signTxns(txnsToSign, opts) {\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tlet txns = txnsToSign;\n\t\t\tif (!Array.isArray(txnsToSign)) {\n\t\t\t\ttxns = [ txnsToSign ];\n\t\t\t}\n\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"signTxns\",\n\t\t\t\t\tparams: { txns, settings: { disableLedgerNano: this.disableLedgerNano }, opts },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new SignTxnsError(res.message, res.code, res.data);\n\n\t\t\treturn res.data.map(r => (r ? Buffer.from(r.blob, 'hex').toString('base64') : null));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tif (this.currentSignLogicSigPopup.closed) {\n\t\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignLogicSigPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup,\n\t\t\t\t{ method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign data to verify in a teal program.\n\t * @param {Uint8Array|Base64} data Data to sign\n\t * @param {Address} contractAddress Address of the contract that will verify the data\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns data signature\n\t */\n\tasync tealSign(data, contractAddress, address) {\n\n\t\tif (this.currentTealSignPopup) {\n\t\t\tif (this.currentTealSignPopup.closed) {\n\t\t\t\tthis.currentTealSignPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentTealSignPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentTealSignPopup);\n\n\t\t\t// Send program\n\t\t\tlet dataInBase64 = data;\n\t\t\tif (data.constructor === Uint8Array)\n\t\t\t\tdataInBase64 = Buffer.from(data).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentTealSignPopup,\n\t\t\t\t{ method: \"tealsign\", params: { data: dataInBase64, contractAddress: contractAddress, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign an arbitrary array of bytes.\n\t * @param {Uint8Array} bytes Bytes to sign\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns bytes signature\n\t */\n\t async signBytes(bytes, address) {\n\t\tif (this.currentSignBytesPopup) {\n\t\t\tif (this.currentSignBytesPopup.closed) {\n\t\t\t\tthis.currentSignBytesPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignBytesPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignBytesPopup);\n\n\t\t\tlet messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignBytesPopup,\n\t\t\t\t{ method: \"signbytes\", params: { data: messageInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n\n\t/**\n\t * @access private\n\t * @description Safely close an opened window\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t */\n\tcloseWindow(window) {\n\t\tif (window && !window.closed && window.close) {\n\t\t\twindow.close();\n\t\t}\n\t}\n\n\t/**\n\t * @access private\n\t * @description Focus current popup\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t * @throws {\"Windows is opened\"}\n\t */\n\tfocusWindow(window) {\n\t\tif (window && window.focus) {\n\t\t\twindow.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(Errors.INVALID_WINDOW);\n\t\t}\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n","const Messenger = require(\"@randlabs/communication-bridge\");\n\nconst WALLET_BRIDGE_CHANNEL_NAME = \"wallet-bridge-communication-channel\";\n\nclass Messaging {\n\n\t/**\n\t * @description Request object\n\t * @typedef {Object} Request\n\t * @property {string} method Request method\n\t * @property {Object} [params] Optionally, request params\n\t */\n\n\t/**\n\t * @description Response object\n\t * @typedef {Object} Response\n\t * @property {\"error\"|\"success\"} status Response status\n\t * @property {string} message Response message\n\t * @property {Object} [data] Optionally, is the request was a success and sent data\n\t */\n\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessagingCallback\n     * @param {Request} request Request received from another window\n     * @param {sendResponse} cb Response callback\n\t * @returns {void}\n     */\n\n\t/**\n     * @constructor Messaging constructor\n     * @param {onMessagingCallback} [listenerCallback]\n     * @description Create an abstraction of Messenger class\n     */\n\n\tconstructor(listenerCallback) {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access public\n\t\t * @description Send message options\n\t\t * @type {import(\"bridge-communication\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: 250 };\n\n\t\t/**\n\t\t * @access private\n\t\t */\n\t\tthis.listenerCallback = listenerCallback;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messenger}\n\t\t */\n\t\tthis.bridge = new Messenger(WALLET_BRIDGE_CHANNEL_NAME, function(req, source, cb, bridge) {\n\t\t\tif (that.listenerCallback)\n\t\t\t\tthat.listenerCallback(req, cb);\n\t\t});\n\t}\n\n\t/**\n\t * @access public\n     * @description Send message to a target window\n     * @param {Window} window Target window\n     * @param {Request} request Request\n     * @param {string} origin Target origin\n\t * @param {import(\"bridge-communication\").sendMessageOptions} [options] Override default message options\n\t * @returns {Promise<Response>} Response of the target window\n     */\n\n\tsendMessage(window, request, origin, options) {\n\t\treturn this.bridge.sendMessage(window, request, origin, options ? options : this.options);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Set new listener\n\t * @param {onMessagingCallback} [listenerCallback] Set a new listener or override actual listener\n\t * @returns {void}\n\t */\n\tsetNewListener(listenerCallback) {\n\t\tthis.listenerCallback = listenerCallback;\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close bridge\n\t * @returns {void}\n\t */\n\tclose() {\n\t\tthis.bridge.close();\n\t}\n}\n\nmodule.exports = Messaging;\n","const { WINDOW_NOT_OPENED } = require(\"../utils/errors\");\n\n/**\n * @description Popup configuration\n * @typedef {Object} PopupOptions\n * @property {string} [name]\n * @property {number} [width]\n * @property {number} [height]\n * @property {number} [top]\n * @property {number} [left]\n * @property {0|1} [status]\n * @property {0|1} [resizable]\n * @property {0|1} [toolbar]\n * @property {0|1} [menubar]\n * @property {0|1} [scrollbars]\n */\n\n/**\n * @type {PopupOptions}\n */\nconst defaultOptions = {\n\twidth: 400,\n\theight: 600,\n};\n\n/**\n * @description Open a new browser window\n * @param {string} url\n * @param {PopupOptions} options\n * @returns {Window}\n * @file Open new popup\n * @author The kraken.js team\n * @copyright This file is part of the project BelterJS which is released under Apache-2.0 License.\n * Go to https://github.com/krakenjs/belter for full license details.\n */\n\nfunction openPopup(url, options = defaultOptions) {\n\n\tlet { name = '', width, height, top = 0, left = 0 } = options;\n\n\tif (width) {\n\t\tif (window.outerWidth) {\n\t\t\tleft = Math.round((window.outerWidth - width) / 2) + window.screenX;\n\t\t}\n\t\telse if (window.screen.width) {\n\t\t\tleft = Math.round((window.screen.width - width) / 2);\n\t\t}\n\t}\n\n\tif (height) {\n\t\tif (window.outerHeight) {\n\t\t\ttop = Math.round((window.outerHeight - height) / 2) + window.screenY;\n\t\t}\n\t\telse if (window.screen.height) {\n\t\t\ttop = Math.round((window.screen.height - height) / 2);\n\t\t}\n\t}\n\n\tif (width && height) {\n\t\toptions = {\n\t\t\ttop,\n\t\t\tleft,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tstatus: 1,\n\t\t\ttoolbar: 0,\n\t\t\tmenubar: 0,\n\t\t\tresizable: 1,\n\t\t\tscrollbars: 1,\n\t\t};\n\t}\n\n\t// eslint-disable-next-line array-callback-return\n\tconst params = Object.keys(options).map((key) => {\n\t\tconst param = options[key];\n\t\tif (param !== null && param !== undefined && typeof param.toString === 'function') {\n\t\t\treturn `${key}=${param.toString()}`;\n\t\t}\n\t}).filter(Boolean).join(',');\n\n\tlet win;\n\n\ttry {\n\t\twin = window.open(url, name, params);\n\t}\n\tcatch (err) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - ${err.stack || err.message}`);\n\t}\n\n\tif (!win || window.closed) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - blocked`);\n\t}\n\n\treturn win;\n}\n\nmodule.exports = {\n\topenPopup,\n};\n","const ERRORS = {\n\tWINDOW_NOT_LOADED: \"Window not loaded\",\n\tWINDOW_IS_OPENED: \"Windows is opened\",\n\tWINDOW_NOT_OPENED: \"Can not open popup window\",\n\tINVALID_WINDOW: \"Invalid window\",\n};\n\nclass SignTxnsError extends Error {\n\tconstructor(message, code, data) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t\tthis.data = data;\n\t}\n}\n\nmodule.exports = {\n\tERRORS,\n\tSignTxnsError\n};\n","\nfunction sleep(msec = 200) {\n\treturn new Promise(resolve => setTimeout(resolve, msec));\n}\n\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\nfunction prepareTxn(transaction) {\n\n\tif (transaction.constructor === Uint8Array)\n\t\treturn Buffer.from(transaction).toString(\"base64\");\n\telse if (typeof transaction === \"string\")\n\t\treturn transaction;\n\n\tconst txn = Object.assign({}, transaction);\n\n\tif (txn.note && txn.note.constructor === Uint8Array)\n\t\ttxn.note = Buffer.from(txn.note).toString(\"base64\");\n\n\tif (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array)\n\t\ttxn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n\n\tif (txn.group && txn.group.constructor === Uint8Array)\n\t\ttxn.group = Buffer.from(txn.group).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array)\n\t\ttxn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array)\n\t\ttxn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0)\n\t\tfor (let i = 0; i < txn.appArgs.length; i++)\n\t\t\tif (txn.appArgs[i].constructor === Uint8Array)\n\t\t\t\ttxn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n\n\treturn txn;\n}\n\nmodule.exports = {\n\tsleep,\n\tprepareTxn,\n};\n","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n  return _construct.apply(null, arguments);\n}\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeFunction = require(\"./isNativeFunction.js\");\nvar construct = require(\"./construct.js\");\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["module","exports","Messenger","channelName","onMessageCallback","this","onMessage","_installListener","_requests","Map","_nextId","_defaultTimeout","that","_listener","event","data","json","JSON","parse","channel","message","err","replyId","req","get","origin","targetOrigin","clearTimeout","timeout","delete","resolve","id","source","request","postMessage","stringify","window","addEventListener","targetWindow","options","URL","e","Error","getNextId","waitForReply","Promise","reject","setTimeout","set","removeEventListener","openPopup","require","sleep","prepareTxn","Errors","SignTxnsError","Messaging","bridge","MyAlgoConnect","url","bridgeUrl","endsWith","slice","currentConnectPopup","currentSigntxPopup","currentSignLogicSigPopup","currentTealSignPopup","currentSignBytesPopup","disableLedgerNano","settings","shouldSelectOneAccount","openManager","closed","focusWindow","waitForWindowToLoad","sendMessage","method","params","Object","assign","res","closeWindow","status","accounts","transaction","signOptions","txn","Array","isArray","from","map","tx","result","t","blob","Uint8Array","Buffer","push","txnsToSign","opts","txns","code","r","toString","logic","address","logicInBase64","constructor","signedTeal","contractAddress","dataInBase64","signature","bytes","messageInBase64","retries","i","WINDOW_NOT_LOADED","close","focus","WINDOW_IS_OPENED","INVALID_WINDOW","listenerCallback","cb","WINDOW_NOT_OPENED","defaultOptions","width","height","name","top","left","outerWidth","Math","round","screenX","screen","outerHeight","screenY","toolbar","menubar","resizable","scrollbars","win","keys","key","param","undefined","filter","Boolean","join","open","stack","ERRORS","msec","note","assetMetadataHash","group","type","appApprovalProgram","appClearProgram","appArgs","length","setPrototypeOf","isNativeReflectConstruct","_construct","Parent","args","Class","Reflect","construct","bind","__esModule","a","apply","instance","Function","prototype","arguments","fn","call","indexOf","getPrototypeOf","isNativeFunction","_wrapNativeSuper","_cache","TypeError","has","Wrapper","create","value","enumerable","writable","configurable"],"sourceRoot":""}