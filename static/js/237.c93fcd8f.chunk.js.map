{"version":3,"file":"static/js/237.c93fcd8f.chunk.js","mappings":"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","sources":["../../txnlab/txnlab-use-wallet/node_modules/@randlabs/communication-bridge/index.js","../../txnlab/txnlab-use-wallet/node_modules/@randlabs/communication-bridge/lib/messenger.js","../../txnlab/txnlab-use-wallet/node_modules/@randlabs/myalgo-connect/index.js","../../txnlab/txnlab-use-wallet/node_modules/@randlabs/myalgo-connect/lib/main.js","../../txnlab/txnlab-use-wallet/node_modules/@randlabs/myalgo-connect/lib/messaging/Messaging.js","../../txnlab/txnlab-use-wallet/node_modules/@randlabs/myalgo-connect/lib/popup/popup.js","../../txnlab/txnlab-use-wallet/node_modules/@randlabs/myalgo-connect/lib/utils/errors.js","../../txnlab/txnlab-use-wallet/node_modules/@randlabs/myalgo-connect/lib/utils/utils.js"],"sourcesContent":["module.exports = require(\"./lib/messenger\");\n","class Messenger {\n\n\t/**\n\t * @callback onMessage\n\t * @param {error} err\n\t * @param {Object} result\n\t */\n\n\t/**\n\t * @description Callback function to send response to the window source of the message\n\t * @callback sendResponse\n\t * @param {Object} response Message response\n\t * @returns {void}\n\t */\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessageCallback\n     * @param {Object} json\n\t * @param {Window} source\n     * @param {sendResponse} cb\n\t * @param {Messenger} bridge\n\t * @returns {void}\n     */\n\n\t/**\n\t * @description Send message options\n\t * @typedef {Object} sendMessageOptions\n\t * @property {boolean} waitForReply Wait for a reply from the recipient\n\t * @property {string} origin Override Window.origin\n\t * @property {number} timeout Timeout to wait for reply message, default 4000 msec\n\t */\n\n\t/**\n     * @param {string} channelName  Channel Name\n     * @param {onMessageCallback} [onMessageCallback] Callback function\n     */\n\n\tconstructor(channelName, onMessageCallback) {\n\t\tthis.channelName = channelName;\n\t\tthis.onMessage = onMessageCallback;\n\n\t\tthis._installListener();\n\n\t\t/**\n\t\t * @access private\n\t\t * @typedef {Object.<string, onMessage>} RequestObject Request objects\n\t\t * @type {RequestObject} _requests Mapping of request ids to callbacks\n\t\t */\n\t\tthis._requests = new Map();\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Next request id\n\t\t */\n\t\tthis._nextId = 0;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Time to wait for the message response\n\t\t */\n\t\tthis._defaultTimeout = 4000;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\t_installListener() {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access private\n\t\t * @param {Window} this\n\t\t * @param {MessageEvent} event\n\t\t */\n\n\t\tthis._listener = function (event) {\n\t\t\t// Ignore invalid messages or those after the client has closed\n\t\t\tif (!event.data || typeof event.data !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet json;\n\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(event.data);\n\t\t\t\tif (!json.channel || json.channel !== that.channelName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (typeof json.message !== 'object') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t // Ignore malformed messages or not targetting us\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add request callback\n\t\t\tif (typeof json.replyId !== 'undefined') {\n\n\t\t\t\tif (typeof json.replyId !== 'number' || (json.replyId % 1) !== 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If we have a message waiting for a reply, process it, else ignore\n\t\t\t\tconst req = that._requests.get(json.replyId);\n\t\t\t\tif (req) {\n\t\t\t\t\t// Ignore if the message comes from somewhere else\n\t\t\t\t\tif (event.origin !== req.targetOrigin) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(req.timeout);\n\n\t\t\t\t\tthat._requests.delete(json.replyId);\n\n\t\t\t\t\treq.resolve(json.message);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (typeof json.id !== 'number' || (json.id % 1) !== 0 || !that.onMessage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We received a message\n\t\t\t\tconst channel = that.channelName;\n\t\t\t\tconst replyId = json.id;\n\t\t\t\tconst origin = event.origin;\n\n\t\t\t\tconst replyMessage = function (message) {\n\t\t\t\t\tconst request = {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\treplyId,\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t};\n\n\t\t\t\t\tevent.source.postMessage(\n\t\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\t\torigin\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tthat.onMessage(json.message, event.origin, event.source, replyMessage, that);\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener(\"message\", this._listener);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Send a message to another window\n\t * @param {Window} targetWindow Target Window\n\t * @param {Object} message Object Message\n\t * @param {string} origin Target origin\n\t * @param {sendMessageOptions} [options] Object Message\n\t * @returns {Promise<any>} Returns\n\t */\n\tsendMessage(targetWindow, message, origin, options) {\n\t\tlet targetOrigin;\n\t\ttry {\n\t\t\ttargetOrigin = new URL(origin).origin;\n\t\t}\n\t\tcatch (e) {\n\t\t\tthrow new Error('Invalid origin URL');\n\t\t}\n\n\t\t// Prepare message\n\t\tconst request = {\n\t\t\tchannel: this.channelName,\n\t\t\tid: this.getNextId(),\n\t\t\tmessage: message,\n\t\t};\n\n\t\tif (options && options.waitForReply) {\n\t\t\tconst that = this;\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t// Set a timeout if a response is not received\n\t\t\t\tconst timeout = setTimeout(function() {\n\t\t\t\t\tconst req = that._requests.get(request.id);\n\t\t\t\t\tif (req) {\n\t\t\t\t\t\tthat._requests.delete(request.id);\n\n\t\t\t\t\t\treject(new Error('Timeout expired for the message response'));\n\t\t\t\t\t}\n\t\t\t\t}, options && options.timeout ? options.timeout : that._defaultTimeout);\n\n\t\t\t\tthat._requests.set(request.id, {\n\t\t\t\t\ttimeout,\n\t\t\t\t\tresolve,\n\t\t\t\t\ttargetOrigin,\n\t\t\t\t});\n\n\t\t\t\ttargetWindow.postMessage(\n\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\ttargetOrigin\n\t\t\t\t);\n\t\t\t});\n\n\t\t}\n\t\ttargetWindow.postMessage(\n\t\t\tJSON.stringify(request),\n\t\t\ttargetOrigin\n\t\t);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close client connection\n\t */\n\n\tclose() {\n\t\twindow.removeEventListener('message', this._listener);\n\t\tthis._listener = null;\n\t\tdelete this._requests;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\tgetNextId() {\n\t\tthis._nextId += 1;\n\t\treturn this._nextId;\n\t}\n}\n\nmodule.exports = Messenger;\n","module.exports = require(\"./lib/main\");\n","const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst Errors = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n\n/**\n * @type {Messaging | null}\n */\nlet bridge = null;\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\tif (!bridge) {\n\t\t\tbridge = new Messaging();\n\t\t}\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current tealsign opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentTealSignPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signbytes opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\t this.currentSignBytesPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Replace default bridge options\n\t\t * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: this.timeout };\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Disable ledger nano\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.disableLedgerNano = (options && options.disableLedgerNano) ? options.disableLedgerNano : false;\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false, openManager: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tif (this.currentConnectPopup.closed) {\n\t\t\t\tthis.currentConnectPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentConnectPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup,\n\t\t\t\t{ method: \"unlock\", params: Object.assign(settings, { disableLedgerNano: this.disableLedgerNano }) },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction, signOptions) {\n\t\tlet txn;\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"transaction\",\n\t\t\t\t\tparams: { txn, settings: { disableLedgerNano: this.disableLedgerNano }, options: signOptions },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tif (this.currentSignLogicSigPopup.closed) {\n\t\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignLogicSigPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup,\n\t\t\t\t{ method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign data to verify in a teal program.\n\t * @param {Uint8Array|Base64} data Data to sign\n\t * @param {Address} contractAddress Address of the contract that will verify the data\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns data signature\n\t */\n\tasync tealSign(data, contractAddress, address) {\n\n\t\tif (this.currentTealSignPopup) {\n\t\t\tif (this.currentTealSignPopup.closed) {\n\t\t\t\tthis.currentTealSignPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentTealSignPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentTealSignPopup);\n\n\t\t\t// Send program\n\t\t\tlet dataInBase64 = data;\n\t\t\tif (data.constructor === Uint8Array)\n\t\t\t\tdataInBase64 = Buffer.from(data).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentTealSignPopup,\n\t\t\t\t{ method: \"tealsign\", params: { data: dataInBase64, contractAddress: contractAddress, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign an arbitrary array of bytes.\n\t * @param {Uint8Array} bytes Bytes to sign\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns bytes signature\n\t */\n\t async signBytes(bytes, address) {\n\t\tif (this.currentSignBytesPopup) {\n\t\t\tif (this.currentSignBytesPopup.closed) {\n\t\t\t\tthis.currentSignBytesPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignBytesPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignBytesPopup);\n\n\t\t\tlet messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignBytesPopup,\n\t\t\t\t{ method: \"signbytes\", params: { data: messageInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n\n\t/**\n\t * @access private\n\t * @description Safely close an opened window\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t */\n\tcloseWindow(window) {\n\t\tif (window && !window.closed && window.close) {\n\t\t\twindow.close();\n\t\t}\n\t}\n\n\t/**\n\t * @access private\n\t * @description Focus current popup\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t * @throws {\"Windows is opened\"}\n\t */\n\tfocusWindow(window) {\n\t\tif (window && window.focus) {\n\t\t\twindow.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(Errors.INVALID_WINDOW);\n\t\t}\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n","const Messenger = require(\"@randlabs/communication-bridge\");\n\nconst WALLET_BRIDGE_CHANNEL_NAME = \"wallet-bridge-communication-channel\";\n\nclass Messaging {\n\n\t/**\n\t * @description Request object\n\t * @typedef {Object} Request\n\t * @property {string} method Request method\n\t * @property {Object} [params] Optionally, request params\n\t */\n\n\t/**\n\t * @description Response object\n\t * @typedef {Object} Response\n\t * @property {\"error\"|\"success\"} status Response status\n\t * @property {string} message Response message\n\t * @property {Object} [data] Optionally, is the request was a success and sent data\n\t */\n\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessagingCallback\n     * @param {Request} request Request received from another window\n     * @param {sendResponse} cb Response callback\n\t * @returns {void}\n     */\n\n\t/**\n     * @constructor Messaging constructor\n     * @param {onMessagingCallback} [listenerCallback]\n     * @description Create an abstraction of Messenger class\n     */\n\n\tconstructor(listenerCallback) {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access public\n\t\t * @description Send message options\n\t\t * @type {import(\"bridge-communication\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: 250 };\n\n\t\t/**\n\t\t * @access private\n\t\t */\n\t\tthis.listenerCallback = listenerCallback;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messenger}\n\t\t */\n\t\tthis.bridge = new Messenger(WALLET_BRIDGE_CHANNEL_NAME, function(req, source, cb, bridge) {\n\t\t\tif (that.listenerCallback)\n\t\t\t\tthat.listenerCallback(req, cb);\n\t\t});\n\t}\n\n\t/**\n\t * @access public\n     * @description Send message to a target window\n     * @param {Window} window Target window\n     * @param {Request} request Request\n     * @param {string} origin Target origin\n\t * @param {import(\"bridge-communication\").sendMessageOptions} [options] Override default message options\n\t * @returns {Promise<Response>} Response of the target window\n     */\n\n\tsendMessage(window, request, origin, options) {\n\t\treturn this.bridge.sendMessage(window, request, origin, options ? options : this.options);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Set new listener\n\t * @param {onMessagingCallback} [listenerCallback] Set a new listener or override actual listener\n\t * @returns {void}\n\t */\n\tsetNewListener(listenerCallback) {\n\t\tthis.listenerCallback = listenerCallback;\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close bridge\n\t * @returns {void}\n\t */\n\tclose() {\n\t\tthis.bridge.close();\n\t}\n}\n\nmodule.exports = Messaging;\n","const { WINDOW_NOT_OPENED } = require(\"../utils/errors\");\n\n/**\n * @description Popup configuration\n * @typedef {Object} PopupOptions\n * @property {string} [name]\n * @property {number} [width]\n * @property {number} [height]\n * @property {number} [top]\n * @property {number} [left]\n * @property {0|1} [status]\n * @property {0|1} [resizable]\n * @property {0|1} [toolbar]\n * @property {0|1} [menubar]\n * @property {0|1} [scrollbars]\n */\n\n/**\n * @type {PopupOptions}\n */\nconst defaultOptions = {\n\twidth: 400,\n\theight: 600,\n};\n\n/**\n * @description Open a new browser window\n * @param {string} url\n * @param {PopupOptions} options\n * @returns {Window}\n * @file Open new popup\n * @author The kraken.js team\n * @copyright This file is part of the project BelterJS which is released under Apache-2.0 License.\n * Go to https://github.com/krakenjs/belter for full license details.\n */\n\nfunction openPopup(url, options = defaultOptions) {\n\n\tlet { name = '', width, height, top = 0, left = 0 } = options;\n\n\tif (width) {\n\t\tif (window.outerWidth) {\n\t\t\tleft = Math.round((window.outerWidth - width) / 2) + window.screenX;\n\t\t}\n\t\telse if (window.screen.width) {\n\t\t\tleft = Math.round((window.screen.width - width) / 2);\n\t\t}\n\t}\n\n\tif (height) {\n\t\tif (window.outerHeight) {\n\t\t\ttop = Math.round((window.outerHeight - height) / 2) + window.screenY;\n\t\t}\n\t\telse if (window.screen.height) {\n\t\t\ttop = Math.round((window.screen.height - height) / 2);\n\t\t}\n\t}\n\n\tif (width && height) {\n\t\toptions = {\n\t\t\ttop,\n\t\t\tleft,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tstatus: 1,\n\t\t\ttoolbar: 0,\n\t\t\tmenubar: 0,\n\t\t\tresizable: 1,\n\t\t\tscrollbars: 1,\n\t\t};\n\t}\n\n\t// eslint-disable-next-line array-callback-return\n\tconst params = Object.keys(options).map((key) => {\n\t\tconst param = options[key];\n\t\tif (param !== null && param !== undefined && typeof param.toString === 'function') {\n\t\t\treturn `${key}=${param.toString()}`;\n\t\t}\n\t}).filter(Boolean).join(',');\n\n\tlet win;\n\n\ttry {\n\t\twin = window.open(url, name, params);\n\t}\n\tcatch (err) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - ${err.stack || err.message}`);\n\t}\n\n\tif (!win || window.closed) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - blocked`);\n\t}\n\n\treturn win;\n}\n\nmodule.exports = {\n\topenPopup,\n};\n","module.exports = {\n\tWINDOW_NOT_LOADED: \"Window not loaded\",\n\tWINDOW_IS_OPENED: \"Windows is opened\",\n\tWINDOW_NOT_OPENED: \"Can not open popup window\",\n\tINVALID_WINDOW: \"Invalid window\",\n};\n","\nfunction sleep(msec = 200) {\n\treturn new Promise(resolve => setTimeout(resolve, msec));\n}\n\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\nfunction prepareTxn(transaction) {\n\n\tif (transaction.constructor === Uint8Array)\n\t\treturn Buffer.from(transaction).toString(\"base64\");\n\telse if (typeof transaction === \"string\")\n\t\treturn transaction;\n\n\tconst txn = Object.assign({}, transaction);\n\n\tif (txn.note && txn.note.constructor === Uint8Array)\n\t\ttxn.note = Buffer.from(txn.note).toString(\"base64\");\n\n\tif (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array)\n\t\ttxn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n\n\tif (txn.group && txn.group.constructor === Uint8Array)\n\t\ttxn.group = Buffer.from(txn.group).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array)\n\t\ttxn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array)\n\t\ttxn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0)\n\t\tfor (let i = 0; i < txn.appArgs.length; i++)\n\t\t\tif (txn.appArgs[i].constructor === Uint8Array)\n\t\t\t\ttxn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n\n\treturn txn;\n}\n\nmodule.exports = {\n\tsleep,\n\tprepareTxn,\n};\n"],"names":["module","exports","Messenger","channelName","onMessageCallback","this","onMessage","_installListener","_requests","Map","_nextId","_defaultTimeout","that","_listener","event","data","json","JSON","parse","channel","message","err","replyId","req","get","origin","targetOrigin","clearTimeout","timeout","delete","resolve","id","source","request","postMessage","stringify","window","addEventListener","targetWindow","options","URL","e","Error","getNextId","waitForReply","Promise","reject","setTimeout","set","removeEventListener","openPopup","require","sleep","prepareTxn","Errors","Messaging","bridge","MyAlgoConnect","url","bridgeUrl","endsWith","slice","currentConnectPopup","currentSigntxPopup","currentSignLogicSigPopup","currentTealSignPopup","currentSignBytesPopup","disableLedgerNano","settings","shouldSelectOneAccount","openManager","closed","focusWindow","waitForWindowToLoad","sendMessage","method","params","Object","assign","res","closeWindow","status","accounts","transaction","signOptions","txn","Array","isArray","from","map","tx","result","t","blob","Uint8Array","Buffer","push","logic","address","logicInBase64","constructor","toString","signedTeal","contractAddress","dataInBase64","signature","bytes","messageInBase64","retries","i","WINDOW_NOT_LOADED","close","focus","WINDOW_IS_OPENED","INVALID_WINDOW","listenerCallback","cb","WINDOW_NOT_OPENED","defaultOptions","width","height","name","top","left","outerWidth","Math","round","screenX","screen","outerHeight","screenY","toolbar","menubar","resizable","scrollbars","win","keys","key","param","undefined","filter","Boolean","join","open","stack","msec","note","assetMetadataHash","group","type","appApprovalProgram","appClearProgram","appArgs","length"],"sourceRoot":""}